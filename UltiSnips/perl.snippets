snippet #
#! /usr/bin/env perl

use strict;
use warnings;
use feature 'say';
use File::Glob ':bsd_glob';
use Term::ANSIColor qw/color :constants/;
use Getopt::Long qw/GetOptions :config bundling/;
use File::Basename 'basename';
use File::Path 'make_path';
use List::Util 'any';

my $BLUE = color('ansi69');
my $CYAN = color('ansi45');
my $S = color('bold');
my $R = color('reset');

# Help
sub help() {
   print <<MSG;
${S}SYNOPSIS${R}
${S}OPTIONS${R}
${S}DESCRIPTION${R}
MSG
   exit;
}

# Arguments
GetOptions (
   'h|help' => \&help
) or die RED.'Error in command line arguments'.RESET, "\n";


endsnippet

snippet use "File::Glob"
use File::Glob ':bsd_glob';
endsnippet

snippet use "Term::ANSIColor"
use Term::ANSIColor qw/color :constants/;

my $BLUE = color('ansi69');
my $CYAN = color('ansi45');
my $GRAY = color('ansi242');
my $PINK = color('ansi205');
my $S = color('bold');
my $R = color('reset');
endsnippet

snippet use "Getopt::Long"
use Getopt::Long qw/GetOptions :config bundling/;

# Help
sub help() {
   print <<MSG;
${S}SYNOPSIS${R}
${S}OPTIONS${R}
${S}DESCRIPTION${R}
MSG
   exit;
}

# Arguments
my \$$1;
GetOptions (
   '$2|$3' => \\$$1,
   'h|help' => \&help
) or die RED.'Error in command line arguments'.RESET, "\n";
endsnippet

snippet use "File::Basename"
use File::Basename 'basename';
endsnippet

snippet use "File::Path"
use File::Path 'make_path';
endsnippet

snippet use "List::Util"
use List::Util 'any';
endsnippet

snippet '(die|warn)' "err" r
`!p snip.rv = match.group(1)` RED.'$1'.RESET, "\n";
endsnippet

snippet sys
system qw/$1/;
endsnippet

snippet dump
use Data::Dumper;
say Dumper
endsnippet

snippet doc
print <<${1:MSG};
$2
$1
endsnippet

snippet =
my (\$$1, \$$2, \$$3) = $4;
endsnippet

snippet |
open my \$${1:fh}, '${2:-|}', '${3:command}';

while (<\$$1>)
{
   chomp;
   $4
}
endsnippet

snippet open
open my \$${1:fh}, '${2:<}', '${3:file}';
endsnippet

snippet each
while (my (\$${1:key}, \$${2:val}) = each %$3)
{
   $4;
}
endsnippet

snippet read
print '$1: ';
chomp (${2:$_} = <STDIN>);

endsnippet

snippet yes
<STDIN> =~ /y(?:es)?/i;
endsnippet

snippet else
} else {
   $1;
}
endsnippet

# add code to remplace data with end
snippet 'data|end' "data" r
__${1:DATA}__
endsnippet

snippet %
my %$1 =
(
   $2 => '$3',
   $4 => '$5',
);
endsnippet

# Use [ or @ to fill an array
snippet '\[|@' "array" r
my @${1:array} = qw/${2:word1} ${3:word2} ${4:word3}/;
endsnippet
