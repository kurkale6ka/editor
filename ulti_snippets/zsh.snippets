priority 11

# Hash bang using the env command
snippet #
#! /usr/bin/env ${1:zsh}
endsnippet

# snippet read
# endsnippet

snippet p
print -l ${1}
endsnippet

snippet doc
cat << 'EOM'
${1}
EOM
endsnippet

snippet fun
${1:name}() {
   ${2:commands}
}
endsnippet

snippet alias
alias ${1:name}='${2}'
endsnippet

snippet _
/dev/null
endsnippet

snippet trap
trap '${1:exit 0}' ${2:INT TERM}
endsnippet

snippet \\
# Run batches of up to 30 (read explanation below) jobs in parallel
# When you reach a certain number of bg processes, bash starts disowning
# the oldest processes, meaning you lose control over them
((i++)); ((i % 30 == 0) && wait
endsnippet

## Skeleton
snippet skel
#! /usr/bin/env zsh

# ${1:Short Description}
#
# Author: `g:snips_author` <mitkofr@yahoo.fr>
# -------------------------------------------

${2:setopt extended_glob}
endsnippet

## Colors
snippet colors
# 0 - Black    4 - Blue
# 1 - Red      5 - Purple
# 2 - Green    6 - Cyan
# 3 - Yellow   7 - White

b=$(tput bold)
u=$(tput smul) # underline
r=$(tput sgr0) # reset

# set(af|ab) -> foreground|background
L${1:White}=$(printf %s $b; tput setaf ${2:7}; tput setab 4)

echo "\${L$1}Hello World${r}"
endsnippet

## Loops
snippet for "for variable in words" !
for ${1:i} in ${2:"\$@"}
do
   ${3:echo} \$$1
done
endsnippet

snippet for "for variable in range"
for ${1:i} in \{${2:start}..${3:end}}
do
   ${4:echo} \$$1
done
endsnippet

snippet for "C-like for"
for ((${1:i} = ${2:0}; $1 < ${3:10}; $1++))
do
   ${4:commands}
done
endsnippet

snippet while
while ${1:command}
do
   ${2:commands}
done
endsnippet

snippet until
until ${1:command}
do
   ${2:commands}
done
endsnippet

## Switch / select
snippet case "Case" !
case \$${1:variable} in
   (${2:glob1}) ${3:command};;
   (${4:glob2}) ${5:command};;
   (${6:glob3}) ${7:command};;
   (*) ${8:default_command};;
esac
endsnippet

snippet case "Select"
opts[1]='${1}'
opts[2]='${2}'
opts[3]='${3}'

select choice in $opts
do
   case $choice in
      (${opts[1]}) ${4}; break;;
      (${opts[2]}) ${5}; break;;
      (${opts[3]}) ${6}; break;;
   esac
   echo '*** Wrong choice ***'
done
endsnippet

## if
snippet if "Commands" !
if ${1:commands}
then
   ${2:commands}
fi
endsnippet

snippet if "String comparison"
if [[ ${1:'test'} ${2:==} ${3:\$right_operand} ]]
then
   ${4:commands}
fi
endsnippet

snippet if "Digit comparison"
if (( ${1:0} ${2:<} ${3:j} ))
then
   ${4:commands}
fi
endsnippet

## Arrays
snippet [
${1:array}=(${2:words})
endsnippet

## help
snippet h
setopt extended_glob

if [[ \$1 == -(h|-h)* ]] || (($# == 0))
then
   info='Usage: ${1}'
   if (($#))
   then echo $info    ; exit 0
   else echo $info >&2; exit 1
   fi
fi
endsnippet

snippet help
setopt extended_glob

if [[ \$1 == -(h|-h)* ]] || (($# == 0))
then
read -r -d $'\0' info << 'HELP'
Usage: ${1}
HELP
   if (($#))
   then echo $info    ; exit 0
   else echo $info >&2; exit 1
   fi
fi
endsnippet

## read a 'file'
snippet <> "Read a heredoc"
while read -r ${1:line}
do
   [[ $$1 = \#* || ! $host ]] && continue
   echo $$1
done << EOF
${2}
EOF
endsnippet

snippet <> "Read find's output"
while read -r -d \$'\0'
do
   ${1:\$REPLY}
done < <(${2:find /foo -print0})
endsnippet

## Parameter expansion
snippet / "remove 1 from start"
\$\{${1:parameter}#${2:word to remove}}
endsnippet

snippet / "remove ALL from start"
\$\{${1:parameter}##${2:word to remove}}
endsnippet

snippet / "remove 1 from end"
\$\{${1:parameter}%${2:word to remove}}
endsnippet

snippet / "remove ALL from end"
\$\{${1:parameter}%%${2:word to remove}}
endsnippet

snippet / "s///"
\$\{${1:parameter}/${2:old}/${3:new}}
endsnippet

snippet / "s/// ALL"
\$\{${1:parameter}//${2:old}/${3:new}}
endsnippet

snippet / "substring in parameter"
\$\{${1:parameter}:${2:start (0, ...)}${3::}${4:length (or everything)}}
endsnippet

snippet / "file.ext (remove everything in front)"
\$\{${1:file name}##*/}
endsnippet

snippet / "Remove extension of file"
\$\{${1:file name}%.*}
endsnippet

snippet / "length of parameter"
\$\{#${1:parameter}}
endsnippet

snippet / "all parameters starting with prefix"
\$\{!${1:prefix}@}
endsnippet

snippet / "Parameter expansion on arrays"
\$\{${1:parameters array}[@]${2}#%:/}
endsnippet

## Error
snippet e
1>&2
endsnippet

snippet E
cat 1>&2 << 'HELP'
${1}
HELP
endsnippet

# vim: foldmethod=expr foldexpr=getline(v\:lnum)=~'^##'?'>1'\:'='
