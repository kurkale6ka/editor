# Hash bang using the env command
snippet #
#! /usr/bin/env perl

use strict;
use warnings;
use feature qw/say/;


endsnippet

snippet use
use Getopt::Long;
use File::Basename qw/basename/;
use File::Path qw/make_path/;
use Term::ANSIColor qw/:constants/;
use List::Util qw/any/;


endsnippet

# pc: print color? group p snips?
snippet p
print "\$${1}\n";
endsnippet

snippet pa
print "$_\n" foreach @${1};
endsnippet

snippet pf
printf "%s${1}\n", \$${2};
endsnippet

snippet =
my (\$${1}, \$${2}, \$${3}) = ${4};
endsnippet

# improve: in, out, bi... IO::RPC ?
snippet |
open my \$${1:pipe}, '${2} |';

while (<\$$1>)
{
   chomp;
   ${3}
}
endsnippet

snippet <>
while (<DATA>)
{
   chomp;
   ${1};
}
endsnippet

snippet each
while (my (\$${1:key}, \$${2:val}) = each %${3})
{
   ${4};
}
endsnippet

snippet colors
use Term::ANSIColor qw/:constants/;
endsnippet

snippet yes
<STDIN> =~ /y(?:es)?/i;
endsnippet

snippet else
} else {
endsnippet

# multiple use choice?
snippet basename
use File::Basename qw/basename/;
endsnippet

snippet data
__DATA__
endsnippet

snippet [
@${1:array} = qw/${2:word1} ${3:word2} ${4:word3}/;
endsnippet

snippet ' "Quotes"
my \$${1:variable} = q/${2:sentence}/;
endsnippet

snippet ' "Double quotes"
my \$${1:variable} = qq/${2:sentence}/;
endsnippet

snippet ' "Back ticks"
my \$${1:variable} = qx/${2:sentence}/;
endsnippet

snippet ~ "Substitute"
\$${1:scalar} =~ s/${2:old}/${3:new}/;
endsnippet

snippet ~ "Match"
\$${1:scalar} =~ /${2:pattern}/;
endsnippet

snippet ~ "Look behind"
(?<${1:=}${2:pattern1})${3:pattern2}
endsnippet

snippet ~ "Look ahead"
${1:pattern1}(?${2:=}${3:pattern2})
endsnippet

snippet $
"\$${1}"
endsnippet

snippet $$
"\$${1}\n"
endsnippet

snippet 1
"\$${1}"
endsnippet

snippet 11
"\$${1}\n";
endsnippet
