# skel
snippet #
#! /usr/bin/env perl

use strict;
use warnings;
use feature 'say';
use Getopt::Long 'GetOptions';
use File::Basename 'basename';
use File::Path 'make_path';
use Term::ANSIColor ':constants';
use List::Util 'any';


endsnippet

snippet dump
use Data::Dumper;
say Dumper
endsnippet

snippet doc
print <<${1:MSG};
${2}
$1
endsnippet

snippet opts
sub help() {
   exit;
}

my (\$${1}, \$${2});

GetOptions (
   '$1' => \\\$$1,
   '$2' => \\\$$2,
   'help' => \&help
) or die RED.'Error in command line arguments'.RESET, "\n";
endsnippet

snippet =
my (\$${1}, \$${2}, \$${3}) = ${4};
endsnippet

# Add code to deal with >
snippet <
open my \$${1:fh}, '${2:-|}', '${3}';

while (<\$$1>)
{
   chomp;
   ${4}
}
endsnippet

snippet each
while (my (\$${1:key}, \$${2:val}) = each %${3})
{
   ${4};
}
endsnippet

snippet colors
my  $BLUE = color('ansi69');
my  $CYAN = color('ansi45');
my  $BOLD = color('bold');
my $RESET = color('reset');
endsnippet

snippet read
print '${1}: ';
chomp ($_ = <STDIN>);
endsnippet

snippet yes
<STDIN> =~ /y(?:es)?/i;
endsnippet

snippet else
} else {
endsnippet

# add code to remplace data with end
snippet 'data|end' "data" r
__${1:DATA}__
endsnippet

snippet %
%${1} =
(
   ${2} => '${3}',
   ${4} => '${5}',
);
endsnippet

# Use [ or @ to fill an array
snippet '\[|@' "array" r
my @${1:array} = qw/${2:word1} ${3:word2} ${4:word3}/;
endsnippet
